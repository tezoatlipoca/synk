using System.Text;


public static class GlobalStatic
{
    public static string applicationName = "synk";

    public static string webSite = "https://github.com/tezoatlipoca/synk";


    // generates everything from the footer to the closing html tag
    // including the closing body tag
    public static void GeneratePageFooter(StringBuilder sb)
    {
        sb.AppendLine("<footer>");
        sb.AppendLine($"<div class=\"byline\">Generated by {GlobalStatic.applicationName} instance {GlobalConfig.Hostname} at {DateTime.Now}</div>");
        sb.AppendLine($"<div class=\"byline\">Build # {GlobalConfig.bldVersion}. For more information, visit <a href=\"{GlobalStatic.webSite}\">{GlobalStatic.webSite}</a></div>");
        sb.AppendLine("</footer>");
        sb.AppendLine("</body>");
        sb.AppendLine("</html>");
    }

    // generates everything up to and including the opening body tag
    public static void GenerateHTMLHead(StringBuilder sb, string title = "")
    {
        sb.AppendLine("<!DOCTYPE html>");
        sb.AppendLine("<html>");
        sb.AppendLine("<head>");
        sb.AppendLine("<meta charset=\"utf-8\">");
        if (GlobalConfig.sitecss != null)
        {
            sb.AppendLine($"<link rel=\"stylesheet\" type=\"text/css\" href=\"/{GlobalConfig.sitecss}\">");
        }
        if (GlobalConfig.sitepng != null)
        {
            sb.AppendLine($"<link rel=\"icon\" href=\"/{GlobalConfig.sitepng}\" type=\"image/x-icon\">");
        }
        sb.AppendLine($"<title>{GlobalConfig.Hostname} - {title}</title>");
        sb.AppendLine("</head>");
        sb.AppendLine("<body >");
        sb.AppendLine($"<h1>{title}</h1>");
        //sb.AppendLine("<p><a href=\"/\">Home</a></p>");
        sb.AppendLine("<span class=\"results\" style=\"color: red;\"></span>");
    }

    public static void GenerateUnAuthPage(StringBuilder sb, string msg)
    {
        DBg.d(LogLevel.Trace, "GenerateUnAuthPage");
        // get all the lists

        GenerateHTMLHead(sb, "Unauthorized");


        sb.AppendLine($"<p style=\"color: red;\">{msg}</p>");
        sb.AppendLine("<p>Go back to <a href=\"/login\">the login page?</a></p>");
        GeneratePageFooter(sb);
    }



    // public static async Task<StringBuilder> Generate404Page(string requestPath, string userInfo)
    // {
    //     DBg.d(LogLevel.Trace, "Generate404Page");
    //     // get all the lists
    //     StringBuilder sb = new StringBuilder();
    //     GenerateHTMLHead(sb);

    //     sb.AppendLine($"<h1 class=\"indextitle\">404</h1>");
    //     sb.AppendLine($"<p style=\"color: red;\">Page not found</p>");
    //     sb.AppendLine($"<p>Requested path: {requestPath}</p>");
    //     sb.AppendLine($"<p>Check the <a href=\"/about\">about</a> page?</p>");
    //     GeneratePageFooter(sb);
    //     return sb;
    // }

    public static string SHA256(string input)
    {
        using (var sha256 = System.Security.Cryptography.SHA256.Create())
        {
            byte[] bytes = System.Text.Encoding.UTF8.GetBytes(input);
            byte[] hash = sha256.ComputeHash(bytes);
            return BitConverter.ToString(hash).Replace("-", "").ToLowerInvariant();
        }
    }

    public static long synkStoreSize()
    {
        string fn = "synkStoreSize";
        DBg.d(LogLevel.Trace, fn);
        // get the size of the synkStore
        // if it is larger than maxSynkStoreSize, return 1
        // else return 0
        if (GlobalConfig.synkStore != null)
        {
            var dir = new DirectoryInfo(GlobalConfig.synkStore);
            long size = dir.EnumerateFiles("*", SearchOption.AllDirectories).Sum(file => file.Length);
            DBg.d(LogLevel.Debug, $"Blob store directory {GlobalConfig.synkStore} size: {GlobalStatic.PrettySize(size)}");
            return size;

        }
        return 0;
    }

    // Add this to a utility class, e.g., GlobalStatic
    public static string PrettySize(long bytes)
    {
        string[] sizes = { "B", "KB", "MB", "GB", "TB" };
        double len = bytes;
        int order = 0;
        while (len >= 1024 && order < sizes.Length - 1)
        {
            order++;
            len /= 1024;
        }
        return $"{len:0.##} {sizes[order]}";
    }

}

